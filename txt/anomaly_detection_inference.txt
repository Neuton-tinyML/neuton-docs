Results for Anomaly detection
The instruction for a user what to do next

Step 1 - Download C library: Download the archive with the trained model, inference code, and the inference runner for testing the model’s results on the desktop and defining Anomaly score threshold (without needing an edge device).

Step 2 - Run the Inference Runner on a Desktop to define the Anomaly Score Threshold: Run the inference runner with a dataset that includes anomalies. In anomaly detection mode, the model’s inference calculates an Anomaly Score for each data point. This score indicates how similar the input data is to the "normal" data the model learned during training:
A low score (close to zero) means the data is normal.
A high score means the data is different or unusual (an anomaly).

Use these scores to analyze and define the Anomaly Score Threshold. This threshold will separate normal data from anomalies.

Step 3 - Set the Anomaly Score Threshold: Using the results from the inference runner or based on the specific requirements of your application, set the Anomaly Score Threshold in the C library:

```
// User should define Anomaly Score Threshold to identify anomalies by himself,
// specific to user application
#define USER_DEFINED_ANOMALY_SCORE_THRESHOLD 0.6f

// Check if input data is prepared and ready for model inference
if (p_input_features)
{
    // Run model inference
    neuton_u16_t anomaly_score_index;
    const neuton_output_t* p_anomaly_score;
    neuton_i16_t outputs_num = neuton_nn_run_inference(p_input_features,
                                                        &anomaly_score_index,
                                                        &p_anomaly_score);

    // Check if model inference is ready and successful
    if (outputs_num > 0)
    {
        neuton_output_t anomaly_score = p_anomaly_score[anomaly_score_index];
        printf("Predicted Anomaly score: %f\r\n", anomaly_score);

        if (anomaly_score > USER_DEFINED_ANOMALY_SCORE_THRESHOLD)
        {
            printf("Anomaly detected!\n");
        }
    }
}
```

Step 4 - Run Inference on the Device: The device will now use the threshold during inference to detect anomalies in real-time from new input data.